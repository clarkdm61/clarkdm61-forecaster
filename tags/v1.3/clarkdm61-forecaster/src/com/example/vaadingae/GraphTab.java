package com.example.vaadingae;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.logging.Logger;

import org.vaadin.vaadinvisualizations.AnnotatedTimeLine;
import org.vaadin.vaadinvisualizations.AnnotatedTimeLineEntry;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import dmc.forecaster.client.LedgerEntry;

public class GraphTab extends CustomComponent {

	private static final long serialVersionUID = 142253757813872614L;

	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private AnnotatedTimeLine annotatedTimeLine_1;
	@AutoGenerated
	private Button button_1;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */	


	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GraphTab() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		addEventListenters();
	}
	
	/**
	 * Handle Generate button click
	 */
	private void addEventListenters() {
		
		button_1.addListener(new Button.ClickListener() {

			private static final long serialVersionUID = -320426275432535096L;

			@Override
			public void buttonClick(ClickEvent event) {
				createTimeline();
			}});
	}

	/**
	 * Populate the timeline with data
	 */
	protected void createTimeline() {
		getLogger().info("Creating timeline.");
		
		mainLayout.removeComponent(annotatedTimeLine_1);
		annotatedTimeLine_1 = new AnnotatedTimeLine();
		annotatedTimeLine_1.setImmediate(true);
		annotatedTimeLine_1.setSizeFull();
		annotatedTimeLine_1.setWidth("100px");
		annotatedTimeLine_1.setHeight("800px");
		mainLayout.addComponent(annotatedTimeLine_1);
		
		
		ArrayList<LedgerEntry> ledgerEntries = AppData.getLedgerEntries();
		if (ledgerEntries == null) {
			// TODO: indicate the ledger needs to be generated first (or just do it)
			return;
		}

		annotatedTimeLine_1.setOption("displayAnnotations", true);
		annotatedTimeLine_1.setOption("wmode", "transparent");
		
		annotatedTimeLine_1.setColors("black");
		annotatedTimeLine_1.addLineLabel("Amount");
				
		
		for (LedgerEntry entry : ledgerEntries) {
			ArrayList<AnnotatedTimeLineEntry> timeLineEntries = new ArrayList<AnnotatedTimeLineEntry>(); 
			timeLineEntries.add(new AnnotatedTimeLineEntry(entry.getBalance(), entry.getName(), formatAmountLabel(entry))); 
			int month = entry.getDate().getMonth();
			int year = entry.getDate().getYear();
			int day = entry.getDate().getDate();
			GregorianCalendar cal = new GregorianCalendar(year,month,day);
			annotatedTimeLine_1.add(cal, timeLineEntries); 
		}
	}
	
	public String formatAmountLabel(LedgerEntry entry) {
		if (entry.isIncome()) {
			return "$" + entry.getIncomeAmount();
		} else {
			return "$(" + entry.getExpenseAmount()+")";
		}
	}

	/**
	 * TODO: put this is a base class
	 * @return
	 */
	protected Logger getLogger() {
		return Logger.getLogger(getClass().getName());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// button_1
		button_1 = new Button();
		button_1.setCaption("Generate");
		button_1.setImmediate(true);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		mainLayout.addComponent(button_1);
		
		// annotatedTimeLine_1
		annotatedTimeLine_1 = new AnnotatedTimeLine();
		annotatedTimeLine_1.setImmediate(false);
		annotatedTimeLine_1.setWidth("100.0%");
		annotatedTimeLine_1.setHeight("600px");
		mainLayout.addComponent(annotatedTimeLine_1);
		
		return mainLayout;
	}
}
