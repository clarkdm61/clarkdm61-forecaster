package com.example.vaadingae;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;

import org.vaadin.dialogs.ConfirmDialog;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.CellStyleGenerator;
import com.vaadin.ui.VerticalLayout;

import dmc.forecaster.shared.FinancialEvent;
import dmc.forecaster.shared.Reoccurrence;

public class ManagerTab extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalButtonLayout;

	@AutoGenerated
	private Button btnDelete;

	@AutoGenerated
	private Button btnEdit;

	@AutoGenerated
	private Button btnNew;

	@AutoGenerated
	private Panel managerTablePanel;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private Table managerTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -5330676819611696123L;
	
	// The currently selected event. Null when nothing is selected.
	private FinancialEvent selectedEvent = null;
	
	// Not able to use the ConfirmDialog.Listener as an annonymous inner class because it
	// is missing the Serializable implementation. A request for fix has been made to the author.
	private class DeleteConfirmDialogListener implements ConfirmDialog.Listener, Serializable {
		private static final long serialVersionUID = 1749112843580556004L;

		@Override
		public void onClose(ConfirmDialog dialog) {
			doDelete();
		}
		
	}
	
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ManagerTab() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here:
		initManagerTable();
		
		// add event handlers
		addEventHandlers();
	}
	
	/**
	 * Invoke getAllEvents, then initialize list of existing FinancialEvents
	 */
	public void initManagerTable() {
		List<FinancialEvent> list =  VaadingaeApplication.getForecasterService().getAllEvents();

		Collections.sort(list);
		
		FinancialEventContainer container = new FinancialEventContainer(FinancialEvent.class, list);
		
		managerTable.setContainerDataSource(container);
		managerTable.setVisibleColumns(FinancialEventContainer.NATURAL_COL_ORDER);
		managerTable.setColumnHeaders(FinancialEventContainer.COL_HEADERS_ENGLISH);
		
		managerTable.setCellStyleGenerator(new CellStyleGenerator() {
			
			private static final long serialVersionUID = -1062010296768544652L;

			@Override
			public String getStyle(Object itemId, Object propertyId) {
				// TODO Auto-generated method stub
				FinancialEvent financialEvent = (FinancialEvent) itemId;
				long currTime = System.currentTimeMillis();
				if (financialEvent.getEndDt() != null && financialEvent.getEndDt().getTime() < currTime) {
					return "oldItem";
				}
				return null;
			}
		});
	}
	
	/**
	 * Add event handlers for table item selection, and button clicks
	 */
	protected void addEventHandlers() {
		
		//Handle selection of FinancialEvents in ManagerTab so they can be edited or deleted.
		managerTable.setSelectable(true);
		managerTable.setImmediate(true);
		managerTable.addListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = -670999562596285771L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				FinancialEvent fe = (FinancialEvent)((Table) event.getProperty()).getValue();
				setSelectedEvent(fe);
			}
			
		});

		// Create a new FinancialEvent.
		btnNew.addListener(new Button.ClickListener() {
			private static final long serialVersionUID = -531250317263359229L;

			@Override
			public void buttonClick(ClickEvent event) {
				FinancialEventDialog financialEventDialog = createFinancialEventDialog();
				// Stuff a new FinancialEvent into the editor dialog
				FinancialEvent newEvent = new FinancialEvent("", "", new java.util.Date(), null, null, null, Reoccurrence.None);
				financialEventDialog.openForEdit(newEvent);
				getWindow().addWindow(financialEventDialog);
			}});
		
		//Edit the currently selected event. Do nothing if no event is selected.
		btnEdit.addListener(new Button.ClickListener() {
			private static final long serialVersionUID = -4971025968218918368L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (getSelectedEvent() != null) {
					FinancialEventDialog financialEventDialog = createFinancialEventDialog();
					financialEventDialog.openForEdit(selectedEvent);
					getWindow().addWindow(financialEventDialog);
					
				}
			}});
		
		
		//Delete the currently selected event.
		btnDelete.addListener(new Button.ClickListener() {
			private static final long serialVersionUID = -8571159641244139564L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (getSelectedEvent() != null) {
					showConfirmDelete();
				}
			}});
	}
	
	private void showConfirmDelete() {
		DeleteConfirmDialogListener callback = new DeleteConfirmDialogListener();
		ConfirmDialog.show(getParent().getWindow(), "Confirm Delete", "Delete record?", "Yes", "Cancel", callback);
	}

	
	private void doDelete() {
		VaadingaeApplication.getForecasterService().delete(getSelectedEvent().getId());
		initManagerTable();		
	}
	
	private FinancialEventDialog createFinancialEventDialog() {
		return new FinancialEventDialog(this);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// managerTablePanel
		managerTablePanel = buildManagerTablePanel();
		mainLayout.addComponent(managerTablePanel);
		
		// horizontalButtonLayout
		horizontalButtonLayout = buildHorizontalButtonLayout();
		mainLayout.addComponent(horizontalButtonLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildManagerTablePanel() {
		// common part: create layout
		managerTablePanel = new Panel();
		managerTablePanel.setImmediate(false);
		managerTablePanel.setWidth("100.0%");
		managerTablePanel.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		managerTablePanel.setContent(verticalLayout_2);
		
		return managerTablePanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		
		// managerTable
		managerTable = new Table();
		managerTable.setImmediate(false);
		managerTable.setWidth("100.0%");
		managerTable.setHeight("-1px");
		verticalLayout_2.addComponent(managerTable);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalButtonLayout() {
		// common part: create layout
		horizontalButtonLayout = new HorizontalLayout();
		horizontalButtonLayout.setImmediate(false);
		horizontalButtonLayout.setWidth("100.0%");
		horizontalButtonLayout.setHeight("-1px");
		horizontalButtonLayout.setMargin(false);
		
		// btnNew
		btnNew = new Button();
		btnNew.setCaption("New");
		btnNew.setImmediate(true);
		btnNew.setWidth("-1px");
		btnNew.setHeight("-1px");
		horizontalButtonLayout.addComponent(btnNew);
		
		// btnEdit
		btnEdit = new Button();
		btnEdit.setCaption("Edit");
		btnEdit.setImmediate(true);
		btnEdit.setWidth("-1px");
		btnEdit.setHeight("-1px");
		horizontalButtonLayout.addComponent(btnEdit);
		
		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Delete");
		btnDelete.setImmediate(true);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		horizontalButtonLayout.addComponent(btnDelete);
		
		return horizontalButtonLayout;
	}

	protected FinancialEvent getSelectedEvent() {
		return selectedEvent;
	}

	protected void setSelectedEvent(FinancialEvent selectedEvent) {
		this.selectedEvent = selectedEvent;
	}


}
