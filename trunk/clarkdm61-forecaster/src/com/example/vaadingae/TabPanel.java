package com.example.vaadingae;

import java.util.Collections;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import dmc.forecaster.client.ForecasterService;
import dmc.forecaster.server.ForecasterServiceImpl;
import dmc.forecaster.shared.FinancialEvent;

public class TabPanel extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheet_1;
	@AutoGenerated
	private Panel graphTabPanel;
	@AutoGenerated
	private VerticalLayout verticalLayout_3;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Panel ledgerTabPanel;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Table ledgerTable;
	@AutoGenerated
	private HorizontalLayout ledgerTopLayout;
	@AutoGenerated
	private Button btnGenerateLedger;
	@AutoGenerated
	private PopupDateField endDate;
	@AutoGenerated
	private Label lblEnd;
	@AutoGenerated
	private PopupDateField startDate;
	@AutoGenerated
	private Label lblStart;
	@AutoGenerated
	private Panel managerTabPanel;
	@AutoGenerated
	private VerticalLayout verticalLayout_tabelPanel;
	@AutoGenerated
	private HorizontalLayout horizonalLayout_managerButtons;
	@AutoGenerated
	private Button btnDelete;
	@AutoGenerated
	private Button btnEdit;
	@AutoGenerated
	private Button btnNew;
	@AutoGenerated
	private Panel managerTabelPanel;
	@AutoGenerated
	private VerticalLayout verticalLayout_4;
	@AutoGenerated
	private Table managerTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TabPanel() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		initManagerTable();
		
		// TODO add event handlers
	}

	/**
	 * Invoke getAllEvents, then initialize list of existing FinancialEvents
	 */
	private void initManagerTable() {
		ForecasterService svc =  new ForecasterServiceImpl();
		List<FinancialEvent> list =  svc.getAllEvents();
		initEventList(list);
	}
	
	/**
	 * Initialize list of existing FinancialEvents
	 */
	protected void initEventList(List<FinancialEvent> list) {
		Collections.sort(list);
		
		FinancialEventContainer container = new FinancialEventContainer(FinancialEvent.class, list);
		
		managerTable.setContainerDataSource(container);
		managerTable.setVisibleColumns(FinancialEventContainer.NATURAL_COL_ORDER);
		managerTable.setColumnHeaders(FinancialEventContainer.COL_HEADERS_ENGLISH);		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// tabSheet_1
		tabSheet_1 = buildTabSheet_1();
		mainLayout.addComponent(tabSheet_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet_1() {
		// common part: create layout
		tabSheet_1 = new TabSheet();
		tabSheet_1.setImmediate(true);
		tabSheet_1.setWidth("100.0%");
		tabSheet_1.setHeight("-1px");
		
		// managerTabPanel
		managerTabPanel = buildManagerTabPanel();
		tabSheet_1.addTab(managerTabPanel, "Manage", null);
		
		// ledgerTabPanel
		ledgerTabPanel = buildLedgerTabPanel();
		tabSheet_1.addTab(ledgerTabPanel, "Ledger", null);
		
		// graphTabPanel
		graphTabPanel = buildGraphTabPanel();
		tabSheet_1.addTab(graphTabPanel, "Graph", null);
		
		return tabSheet_1;
	}

	@AutoGenerated
	private Panel buildManagerTabPanel() {
		// common part: create layout
		managerTabPanel = new Panel();
		managerTabPanel.setImmediate(false);
		managerTabPanel.setWidth("100.0%");
		managerTabPanel.setHeight("-1px");
		
		// verticalLayout_tabelPanel
		verticalLayout_tabelPanel = buildVerticalLayout_tabelPanel();
		managerTabPanel.setContent(verticalLayout_tabelPanel);
		
		return managerTabPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_tabelPanel() {
		// common part: create layout
		verticalLayout_tabelPanel = new VerticalLayout();
		verticalLayout_tabelPanel.setImmediate(false);
		verticalLayout_tabelPanel.setWidth("100.0%");
		verticalLayout_tabelPanel.setHeight("-1px");
		verticalLayout_tabelPanel.setMargin(true);
		verticalLayout_tabelPanel.setSpacing(true);
		
		// managerTabelPanel
		managerTabelPanel = buildManagerTabelPanel();
		verticalLayout_tabelPanel.addComponent(managerTabelPanel);
		
		// horizonalLayout_managerButtons
		horizonalLayout_managerButtons = buildHorizonalLayout_managerButtons();
		verticalLayout_tabelPanel.addComponent(horizonalLayout_managerButtons);
		
		return verticalLayout_tabelPanel;
	}

	@AutoGenerated
	private Panel buildManagerTabelPanel() {
		// common part: create layout
		managerTabelPanel = new Panel();
		managerTabelPanel.setImmediate(false);
		managerTabelPanel.setWidth("100.0%");
		managerTabelPanel.setHeight("200px");
		
		// verticalLayout_4
		verticalLayout_4 = buildVerticalLayout_4();
		managerTabelPanel.setContent(verticalLayout_4);
		
		return managerTabelPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_4() {
		// common part: create layout
		verticalLayout_4 = new VerticalLayout();
		verticalLayout_4.setImmediate(false);
		verticalLayout_4.setWidth("100.0%");
		verticalLayout_4.setHeight("-1px");
		verticalLayout_4.setMargin(false);
		
		// managerTable
		managerTable = new Table();
		managerTable.setImmediate(false);
		managerTable.setWidth("100.0%");
		managerTable.setHeight("-1px");
		verticalLayout_4.addComponent(managerTable);
		
		return verticalLayout_4;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizonalLayout_managerButtons() {
		// common part: create layout
		horizonalLayout_managerButtons = new HorizontalLayout();
		horizonalLayout_managerButtons.setImmediate(false);
		horizonalLayout_managerButtons.setWidth("100.0%");
		horizonalLayout_managerButtons.setHeight("-1px");
		horizonalLayout_managerButtons.setMargin(false);
		
		// btnNew
		btnNew = new Button();
		btnNew.setCaption("New");
		btnNew.setImmediate(true);
		btnNew.setWidth("-1px");
		btnNew.setHeight("-1px");
		horizonalLayout_managerButtons.addComponent(btnNew);
		
		// btnEdit
		btnEdit = new Button();
		btnEdit.setCaption("Edit");
		btnEdit.setImmediate(true);
		btnEdit.setWidth("-1px");
		btnEdit.setHeight("-1px");
		horizonalLayout_managerButtons.addComponent(btnEdit);
		
		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Delete");
		btnDelete.setImmediate(true);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		horizonalLayout_managerButtons.addComponent(btnDelete);
		
		return horizonalLayout_managerButtons;
	}

	@AutoGenerated
	private Panel buildLedgerTabPanel() {
		// common part: create layout
		ledgerTabPanel = new Panel();
		ledgerTabPanel.setCaption("Ledger");
		ledgerTabPanel.setImmediate(false);
		ledgerTabPanel.setWidth("100.0%");
		ledgerTabPanel.setHeight("-1px");
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		ledgerTabPanel.setContent(verticalLayout_2);
		
		return ledgerTabPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		
		// ledgerTopLayout
		ledgerTopLayout = buildLedgerTopLayout();
		verticalLayout_2.addComponent(ledgerTopLayout);
		
		// ledgerTable
		ledgerTable = new Table();
		ledgerTable.setImmediate(false);
		ledgerTable.setWidth("100.0%");
		ledgerTable.setHeight("-1px");
		verticalLayout_2.addComponent(ledgerTable);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildLedgerTopLayout() {
		// common part: create layout
		ledgerTopLayout = new HorizontalLayout();
		ledgerTopLayout.setImmediate(false);
		ledgerTopLayout.setWidth("100.0%");
		ledgerTopLayout.setHeight("-1px");
		ledgerTopLayout.setMargin(false);
		
		// lblStart
		lblStart = new Label();
		lblStart.setImmediate(false);
		lblStart.setWidth("-1px");
		lblStart.setHeight("-1px");
		lblStart.setValue("Start");
		ledgerTopLayout.addComponent(lblStart);
		
		// startDate
		startDate = new PopupDateField();
		startDate.setImmediate(false);
		startDate.setWidth("-1px");
		startDate.setHeight("-1px");
		startDate.setInvalidAllowed(false);
		ledgerTopLayout.addComponent(startDate);
		
		// lblEnd
		lblEnd = new Label();
		lblEnd.setImmediate(false);
		lblEnd.setWidth("-1px");
		lblEnd.setHeight("-1px");
		lblEnd.setValue("End");
		ledgerTopLayout.addComponent(lblEnd);
		
		// endDate
		endDate = new PopupDateField();
		endDate.setImmediate(false);
		endDate.setWidth("-1px");
		endDate.setHeight("-1px");
		endDate.setInvalidAllowed(false);
		ledgerTopLayout.addComponent(endDate);
		
		// btnGenerateLedger
		btnGenerateLedger = new Button();
		btnGenerateLedger.setCaption("Go");
		btnGenerateLedger.setImmediate(true);
		btnGenerateLedger.setWidth("-1px");
		btnGenerateLedger.setHeight("-1px");
		ledgerTopLayout.addComponent(btnGenerateLedger);
		
		return ledgerTopLayout;
	}

	@AutoGenerated
	private Panel buildGraphTabPanel() {
		// common part: create layout
		graphTabPanel = new Panel();
		graphTabPanel.setImmediate(false);
		graphTabPanel.setWidth("100.0%");
		graphTabPanel.setHeight("-1px");
		
		// verticalLayout_3
		verticalLayout_3 = buildVerticalLayout_3();
		graphTabPanel.setContent(verticalLayout_3);
		
		return graphTabPanel;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_3() {
		// common part: create layout
		verticalLayout_3 = new VerticalLayout();
		verticalLayout_3.setImmediate(false);
		verticalLayout_3.setWidth("100.0%");
		verticalLayout_3.setHeight("-1px");
		verticalLayout_3.setMargin(false);
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("TBD");
		verticalLayout_3.addComponent(label_1);
		
		return verticalLayout_3;
	}

}
